// www.groovy-lang.org/gdk.html
// original code : attila.kelemen - plugins.netbeans.org/plugin/44510/gradle-support
import org.gradle.api.artifacts.*
apply plugin:'base'// To add "clean" task to the root project.


/**
 * The file 'version.properties' contains three ROOT properties :
 * major (int), minor (int), release (boolean)
 * @throws Exception once file is missing / currupted
 * @author (name="grandyossi" , date="2015-10-29) */
Properties  getVersionPropertiesFromFile() {
    // docs.groovy-lang.org/latest/html/groovy-jdk/java/io/File.html
    File        verFile = file('version.properties')
    if(!verFile.exists())
        throw new Exception("Missing file :   $verFile.name")
    // java.util.Properties
    Properties  maj_min_rel = new Properties()
    verFile.withInputStream { stream -> maj_min_rel.load(stream) }
    Integer     propzCount = maj_min_rel.size()
    if(propzCount != 3)
        throw new Exception("Should be THREE properties. Counted : $propzCount")
    // return
    maj_min_rel
}



allprojects {
    group = 'grandyossi.study.gradle'
    /* [ ]  `ext` namespace : `extra` project properties (1 of 5 property 'scopes')
     *      docs.gradle.org/current/dsl/org.gradle.api.Project.html#org.gradle.api.Project.extraproperties 
     * 
     * [ ]  Project.file(Object path)
     *      docs.gradle.org/current/javadoc/org/gradle/api/Project.html#file(java.lang.Object) */
    ext {
    //??? in tasks without `ext.` :
    /* docs.gradle.org/current/dsl/org.gradle.api.Project.html
       "... reading extra properties is done through the "ext"
       OR through the owning object" */
        maj_min_rel = getVersionPropertiesFromFile()
        versionBase = maj_min_rel.major + '.' + maj_min_rel.minor
        versionIsRelease = maj_min_rel.release.toBoolean()
    }
    logger.quiet 'done :   allprojects'// 1 x per project (including root)
}

/**
 * 'Injected configuration'
 * docs.gradle.org/current/userguide/organizing_build_logic.html */
subprojects {
    ext {
        // NOTICE : 'buildFile' is already defined as 'build.gradle'
        buildPropzFile = file('build.properties')
        versionBuild = ''
    }
    /* Project.apply
     * read later (plugin):
     * stackoverflow.com/questions/17678404/share-common-gradle-settings-customizations-across-projects */
    apply from:rootProject.file('common.gradle')
    logger.quiet 'done :   subprojects'// 1 x per subproject
}


/*
 * task configuration (generated by NetBeans plugin - attila.kelemen) */
task  mergedJavadoc(
            type:Javadoc,
            description:'Creates Javadoc from all the projects.') {
    title = 'All modules'
    destinationDir = new File(project.buildDir, 'merged-javadoc')

    // Note: The closures below are executed lazily.
    source {
       subprojects*.sourceSets*.main*.allSource
    }
    classpath.from {
        subprojects*.configurations*.compile*.copyRecursive(
                                        { !(it instanceof ProjectDependency); }
                                        )*.resolve()
    }
}
